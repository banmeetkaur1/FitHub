import a from "@react-native-async-storage/async-storage";

import t from "@react-native-community/netinfo";

var parseData = (a, t) => {
  try {
    if (a) {
      return JSON.parse(a);
    }
  } catch (a) {}
  return t;
};

var e;

var makeAsyncStorage = ({dataKey: r = "graphcache-data", metadataKey: c = "graphcache-metadata", maxAge: i = 7} = {}) => {
  var n = Math.floor((new Date).valueOf() / 864e5);
  var s = {};
  return {
    readData: async () => {
      if (!Object.keys(s).length) {
        var t = null;
        try {
          t = await a.getItem(r);
        } catch (a) {}
        var e = parseData(t, {});
        Object.assign(s, e);
      }
      var c = !1;
      Object.keys(s).forEach((a => {
        if (n - Number(a) > i) {
          c = !0;
          delete s[a];
        }
      }));
      if (c) {
        try {
          await a.setItem(r, JSON.stringify(s));
        } catch (a) {}
      }
      return Object.assign({}, ...Object.keys(s).map((a => s[a])));
    },
    writeData: async t => {
      if (!Object.keys(s).length) {
        var e = null;
        try {
          e = await a.getItem(r);
        } catch (a) {}
        var c = parseData(e, {});
        Object.assign(s, c);
      }
      var i = {};
      Object.keys(t).forEach((a => {
        if (void 0 === t[a]) {
          i[a] = void 0;
        }
      }));
      for (var y in s) {
        s[y] = Object.assign(s[y], i);
      }
      s[n] = Object.assign(s[n] || {}, t);
      try {
        await a.setItem(r, JSON.stringify(s));
      } catch (a) {}
    },
    writeMetadata: async t => {
      try {
        await a.setItem(c, JSON.stringify(t));
      } catch (a) {}
    },
    readMetadata: async () => {
      var t = null;
      try {
        t = await a.getItem(c);
      } catch (a) {}
      return parseData(t, []);
    },
    onOnline: a => {
      if (e) {
        e();
        e = void 0;
      }
      e = t.addEventListener((({isConnected: t}) => {
        if (t) {
          a();
        }
      }));
    },
    clear: async () => {
      try {
        s = {};
        await a.removeItem(r);
        await a.removeItem(c);
      } catch (a) {}
    }
  };
};

export { makeAsyncStorage };
//# sourceMappingURL=urql-storage-rn.mjs.map
